def most_repeating(lst):
    """ Находит самый повторяющийся элемент в списке

    Аргументы:
        - lst:list - список объектов

    Возвращает:
        - объект

    Указания:
        - используйте функцию max
        - все объекты списка хэшируемые
        - если несколько разных объектов повторяются одинаковое количество раз, то можно вернуть любой из них
        - авторское решение занимает 35 символов
    """
    return max(lst, key=lambda x: lst.count(x))

def reverse_number(num):
    """ Возвращает True, если перевенутое число равно исходному, иначе - возвращает False.
        Например, для 123 перевернутое число 321, функция возвращает False, а для 121 - True

    Аргументы:
        - num:int - целое число

    Возвращает:
        - bool

    Указания:
        - используйте преобразование типов int, str
        - не используйте функцию reverse()
        - авторское решение занимает 33 символа
    """
    return str(num) == str(num)[::-1]

def is_vowel(letter):
    """ Возвращает True, если буква является гласной и False - если согласной

    Аргументы:
        - letter:char - буква

    Возвращает:
        - bool

    Указания:
        - используется английский алфавит
        - используйте оператор in
        - авторское решение занимает 33 символа
    """
    return letter in "eyuioa"

def multiple_filter(nums, mult):
    """ Возвращает копию списка целых чисел nums, из которого удалены все числа,
        кратные mult

    Аргументы:
        - nums:list - список целых чисел
        - mult:int - целое число

    Возвращает:
        - nums: список чисел прошедших фильтрацию, в том же порядке, в каком
                они располагались в исходном списке

    Указания:
        - используйте встроенную функцию filter в комбинации с lambda-функцией
        - авторское решение занимает 48 символов
    """
    return list(filter(lambda x: x % mult != 0, nums))

def repeat_count(sentence):
    """ Подсчитывает сколько раз каждое слово встречается в строке

    Аргументы:
        - sentence:str - строка

    Возвращает:
        - dict: словарь, ключ которого есть слово, а значение - количество
                повторений этого слова

    Указания:
        - гарантируется, что на вход подается одно предложение
        - гарантируется, что в предложении используются лишь запятые (нет ?, /, !, .)
        - используйте методы replace, lower и split типа str
        - для посчета количества повторений используйте метод count типа list
        - авторское решение занимает 2 строки
    """
    words = sentence.replace(',', ' ').lower().split()
    return {word: words.count(word) for word in words}
        

def descending_sort(lst):
    """ Сортирует список целых чисел по убыванию

    Аргументы:
        - lst:list - список целых чисел

    Возвращает:
        - list

    Указания:
        - используйте встроеную функцию sorted
        - авторское решение занимает 32 символа
    """
    return sorted(lst, reverse=True)

def factorial(num):
    """ Считает факториал числа

    Аргументы:
        - num:int - натуральное число

    Возвращает:
        - int

    Указания:
        - способ 1:
            - используйте цикл for
            - авторское решение занимает 4 строки
        - способ 2:
            - используйте рекурсию
            - авторское решение занимает 3 строки
    """
    if num == 0: return 1
    return num * factorial(num -1)

def english_alphabet():
    """ Возвращает английский алфавит

    Аргументы: отсутствуют

    Возвращает:
        - list: список, содержащий все буквы английского алфавита 
        в нижнем регистре в алфавитном порядке

    Указания:
        - используйте list и map или list comprehension
        - используйте преобразование типов ord, chr
        - авторское решение занимает 48 символов
    """
    return [chr(x) for x in range(ord('a'), ord('z')+1)]

def average(nums, acc=0):
    """ Вычисляет среднее арифметическое чисел с заданной точностью

    Аргументы: 
        - lst:list - массив целых чисел
        - acc: int - количество знаков после запятой

    Возвращает:
        - float

    Указания:
        - по умолчанию значение округляется до целого
        - используйте встроенную функцию round
        - обратите внимания на случай, когда на вход подается пустой список. Тогда функция должна вернуть 0
        - авторское решение занимает 68 символов
    """
    if len(nums) == 0: return 0
    return round(sum(nums)/len(nums), acc)

def word_in_file(path, word):
    """ Проверяет есть ли в файле подстрока word

    Аргументы:
        - word:str - подстрока, наличие, которой проверяется
        - path:str - полный путь до файла

    Возвращает:
        - bool

    Указания:
        - гарантируется, что файл существует
        - используйте функцию open, чтобы открыть файл
        - используйте оператор in для поиска подстроки
        - авторское решение занимает 32 символа
    """
    with open(path, 'r') as f:
        return word in f.read()
